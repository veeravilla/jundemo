//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.2-hudson-jaxb-ri-2.2-63- 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.07.25 at 10:17:27 AM CDT 
//


package com.bank.test;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="noOfAccounts" type="{http://www.w3.org/2001/XMLSchema}int"/>
 *         &lt;element name="creditScore" type="{http://www.w3.org/2001/XMLSchema}int"/>
 *         &lt;element name="zipcode" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="status" type="{http://www.test.bank.com/}Status"/>
 *         &lt;element name="address" type="{http://www.test.bank.com/}Address" maxOccurs="unbounded"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "noOfAccounts",
    "creditScore",
    "zipcode",
    "status",
    "address"
})
@XmlRootElement(name = "CreditResponse")
public class CreditResponse implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    protected int noOfAccounts;
    protected int creditScore;
    @XmlElement(required = true)
    protected String zipcode;
    @XmlElement(required = true)
    protected Status status;
    @XmlElement(required = true)
    protected List<Address> address;

    /**
     * Default no-arg constructor
     * 
     */
    public CreditResponse() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public CreditResponse(final int noOfAccounts, final int creditScore, final String zipcode, final Status status, final List<Address> address) {
        this.noOfAccounts = noOfAccounts;
        this.creditScore = creditScore;
        this.zipcode = zipcode;
        this.status = status;
        this.address = address;
    }

    /**
     * Gets the value of the noOfAccounts property.
     * 
     */
    public int getNoOfAccounts() {
        return noOfAccounts;
    }

    /**
     * Sets the value of the noOfAccounts property.
     * 
     */
    public void setNoOfAccounts(int value) {
        this.noOfAccounts = value;
    }

    /**
     * Gets the value of the creditScore property.
     * 
     */
    public int getCreditScore() {
        return creditScore;
    }

    /**
     * Sets the value of the creditScore property.
     * 
     */
    public void setCreditScore(int value) {
        this.creditScore = value;
    }

    /**
     * Gets the value of the zipcode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getZipcode() {
        return zipcode;
    }

    /**
     * Sets the value of the zipcode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setZipcode(String value) {
        this.zipcode = value;
    }

    /**
     * Gets the value of the status property.
     * 
     * @return
     *     possible object is
     *     {@link Status }
     *     
     */
    public Status getStatus() {
        return status;
    }

    /**
     * Sets the value of the status property.
     * 
     * @param value
     *     allowed object is
     *     {@link Status }
     *     
     */
    public void setStatus(Status value) {
        this.status = value;
    }

    /**
     * Gets the value of the address property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the address property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAddress().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Address }
     * 
     * 
     */
    public List<Address> getAddress() {
        if (address == null) {
            address = new ArrayList<Address>();
        }
        return this.address;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            int theNoOfAccounts;
            theNoOfAccounts = this.getNoOfAccounts();
            strategy.appendField(locator, this, "noOfAccounts", buffer, theNoOfAccounts);
        }
        {
            int theCreditScore;
            theCreditScore = this.getCreditScore();
            strategy.appendField(locator, this, "creditScore", buffer, theCreditScore);
        }
        {
            String theZipcode;
            theZipcode = this.getZipcode();
            strategy.appendField(locator, this, "zipcode", buffer, theZipcode);
        }
        {
            Status theStatus;
            theStatus = this.getStatus();
            strategy.appendField(locator, this, "status", buffer, theStatus);
        }
        {
            List<Address> theAddress;
            theAddress = this.getAddress();
            strategy.appendField(locator, this, "address", buffer, theAddress);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof CreditResponse)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final CreditResponse that = ((CreditResponse) object);
        {
            int lhsNoOfAccounts;
            lhsNoOfAccounts = this.getNoOfAccounts();
            int rhsNoOfAccounts;
            rhsNoOfAccounts = that.getNoOfAccounts();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "noOfAccounts", lhsNoOfAccounts), LocatorUtils.property(thatLocator, "noOfAccounts", rhsNoOfAccounts), lhsNoOfAccounts, rhsNoOfAccounts)) {
                return false;
            }
        }
        {
            int lhsCreditScore;
            lhsCreditScore = this.getCreditScore();
            int rhsCreditScore;
            rhsCreditScore = that.getCreditScore();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "creditScore", lhsCreditScore), LocatorUtils.property(thatLocator, "creditScore", rhsCreditScore), lhsCreditScore, rhsCreditScore)) {
                return false;
            }
        }
        {
            String lhsZipcode;
            lhsZipcode = this.getZipcode();
            String rhsZipcode;
            rhsZipcode = that.getZipcode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "zipcode", lhsZipcode), LocatorUtils.property(thatLocator, "zipcode", rhsZipcode), lhsZipcode, rhsZipcode)) {
                return false;
            }
        }
        {
            Status lhsStatus;
            lhsStatus = this.getStatus();
            Status rhsStatus;
            rhsStatus = that.getStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "status", lhsStatus), LocatorUtils.property(thatLocator, "status", rhsStatus), lhsStatus, rhsStatus)) {
                return false;
            }
        }
        {
            List<Address> lhsAddress;
            lhsAddress = this.getAddress();
            List<Address> rhsAddress;
            rhsAddress = that.getAddress();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "address", lhsAddress), LocatorUtils.property(thatLocator, "address", rhsAddress), lhsAddress, rhsAddress)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            int theNoOfAccounts;
            theNoOfAccounts = this.getNoOfAccounts();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "noOfAccounts", theNoOfAccounts), currentHashCode, theNoOfAccounts);
        }
        {
            int theCreditScore;
            theCreditScore = this.getCreditScore();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "creditScore", theCreditScore), currentHashCode, theCreditScore);
        }
        {
            String theZipcode;
            theZipcode = this.getZipcode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "zipcode", theZipcode), currentHashCode, theZipcode);
        }
        {
            Status theStatus;
            theStatus = this.getStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "status", theStatus), currentHashCode, theStatus);
        }
        {
            List<Address> theAddress;
            theAddress = this.getAddress();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "address", theAddress), currentHashCode, theAddress);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof CreditResponse) {
            final CreditResponse copy = ((CreditResponse) draftCopy);
            int sourceNoOfAccounts;
            sourceNoOfAccounts = this.getNoOfAccounts();
            int copyNoOfAccounts = strategy.copy(LocatorUtils.property(locator, "noOfAccounts", sourceNoOfAccounts), sourceNoOfAccounts);
            copy.setNoOfAccounts(copyNoOfAccounts);
            int sourceCreditScore;
            sourceCreditScore = this.getCreditScore();
            int copyCreditScore = strategy.copy(LocatorUtils.property(locator, "creditScore", sourceCreditScore), sourceCreditScore);
            copy.setCreditScore(copyCreditScore);
            if (this.zipcode!= null) {
                String sourceZipcode;
                sourceZipcode = this.getZipcode();
                String copyZipcode = ((String) strategy.copy(LocatorUtils.property(locator, "zipcode", sourceZipcode), sourceZipcode));
                copy.setZipcode(copyZipcode);
            } else {
                copy.zipcode = null;
            }
            if (this.status!= null) {
                Status sourceStatus;
                sourceStatus = this.getStatus();
                Status copyStatus = ((Status) strategy.copy(LocatorUtils.property(locator, "status", sourceStatus), sourceStatus));
                copy.setStatus(copyStatus);
            } else {
                copy.status = null;
            }
            if ((this.address!= null)&&(!this.address.isEmpty())) {
                List<Address> sourceAddress;
                sourceAddress = this.getAddress();
                @SuppressWarnings("unchecked")
                List<Address> copyAddress = ((List<Address> ) strategy.copy(LocatorUtils.property(locator, "address", sourceAddress), sourceAddress));
                copy.address = null;
                List<Address> uniqueAddressl = copy.getAddress();
                uniqueAddressl.addAll(copyAddress);
            } else {
                copy.address = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new CreditResponse();
    }

}
